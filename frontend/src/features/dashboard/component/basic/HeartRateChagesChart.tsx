import {Box, Group, Paper, Stack, Text, ThemeIcon, useMantineTheme,} from '@mantine/core';import {CartesianGrid, LabelList, Line, ResponsiveContainer, Scatter, ScatterChart, XAxis, YAxis,} from 'recharts';import {DetailSection} from "../detail/DetailSection.tsx";const LegendItem = ({label}: { label: string }) => (    <Group gap="sm">        <ThemeIcon color="dark" size={10} radius="xl"/>        <Text size="sm">{label}</Text>    </Group>);const VerticalLine = () => (    <Box w={2} h={30} bg="dark" style={{alignSelf: 'flex-start', marginLeft: 4}}/>);const Legend = () => {    return (        <Paper withBorder radius="md" p="md" style={{minWidth: 120}}>            <Stack gap={0} align="flex-start">                <LegendItem label="최대값"/>                <VerticalLine/>                <LegendItem label="평균"/>                <VerticalLine/>                <LegendItem label="최소값"/>            </Stack>        </Paper>    );};interface DotPlotChartProps {    data: { name: string; value: number }[];    color: string;}const DotPlotChart = ({data, color}: DotPlotChartProps) => {    const theme = useMantineTheme();    const chartColor = theme.colors[color]?.[6] || color;    const title = data[0]?.name || '';    return (        <Stack align="center" gap="xs">            <Box style={{                width: '100%',                minWidth: 80, height: 160            }}>                <ResponsiveContainer>                    <ScatterChart                        margin={{top: 20, right: 30, bottom: 0, left: 10}}                        responsive                    >                        {/* Y축 그리드 라인 */}                        <CartesianGrid/>                        {/* X축 (차트 하단의 "직전", "현재" 라벨) */}                        <XAxis                            type="category"                            dataKey="name"                            tick={false} // X축 눈금 숨기기                            axisLine={false} // X축 선 숨기기                            height={1}                        />                        {/* Y축 (0 ~ 160) */}                        <YAxis                            type="number"                            domain={[0, 160]}                            ticks={[0, 40, 80, 120, 160]}                            axisLine={false}                            tickLine={false}                            tick={{fontSize: 12}}                        />                        {/* 세로 연결선 */}                        <Line                            data={data}                            dataKey="value"                            stroke={chartColor}                            strokeWidth={2}                            dot={false}                            isAnimationActive={false}                        />                        {/* 점 (Scatter) */}                        <Scatter data={data} dataKey="value" fill={chartColor}>                            {/* 점 옆의 숫자 라벨 (예: 87, 76, 40) */}                            <LabelList                                dataKey="value"                                position="right"                                offset={10}                                style={{fill: chartColor, fontSize: 14, fontWeight: 'bold'}}                            />                        </Scatter>                    </ScatterChart>                </ResponsiveContainer>            </Box>            <Text fw={500}>{title}</Text>        </Stack>    );};interface HeartRateCardProps {    previousHrValues: number[];    currentHrValues: number[];}function getMinAvgMax(title: string, arr: number[]): { name: string, value: number }[] {    let min = 9999999;    let max = -9999999;    let total = 0;    arr.forEach(value => {        if (value < min) {            min = value;        }        if (value > max) {            max = value;        }        total += value;    })    return [{        name: title,        value: min    }, {        name: title,        value: Math.round(total / arr.length)    }, {        name: title,        value: max    }]}export const HeartRateChangesChart = ({previousHrValues, currentHrValues}: HeartRateCardProps) => {    const prevData = getMinAvgMax('이전', previousHrValues);    const currentData = getMinAvgMax('이후', currentHrValues);    return (        <DetailSection title={'심박수 변화'}                       description={`심박수 변화(HRV)는 우리 몸의 회복력과 적응력을 보여주는 지표입니다.`}>            <Group mt="xl" grow preventGrowOverflow={false} align="flex-start">                {/* 1. 왼쪽 범례 */}                <Legend/>                {/* 2. 오른쪽 차트 영역 */}                <Group justify="space-around" wrap="nowrap" grow>                    <DotPlotChart data={prevData} color="blue.6"/>                    <DotPlotChart data={currentData} color="red.6"/>                </Group>            </Group>        </DetailSection>    );};